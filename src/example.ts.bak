import { init } from "./init";
import { Setting } from "./setting";

const s = init(/* DotenvConfigOptions here if you want */);

export const environment = {

  // If PORT is not defined in .env or process.env or is not a number, this value will default to 8080 
  port: s.get("PORT").asNumber(8080),

  // If VERBOSE_LOGGING is not defined in .env or process.env or is not a boolean, this value will default to false
  verboseLogging: s.get("VERBOSE_LOGGING").asBool(false),

  // If SOME_TOKEN is not defined in .env or process.env, an exception is thrown
  someToken: s.get("SOME_TOKEN").asString(),

  // If ADMIN_EMAIL is either not available OR does not match the regular expression, an exception is thrown
  adminEmail: s.get("ADMIN_EMAIL").regex(/^[^@\s]+@[^@\s\.]+\.[^@\.\s]+$/).asString()
}

// These are all the settings which came from your .env
// If you're not loading a .env because the file isn't there this collection will be empty.
s.dotEnvSettings.forEach((s: Setting) => {
  console.log(s.name);
});

// These are all the settings which came from your process.env
// This does NOT include the settings from .env
s.processEnvSettings.forEach((s: Setting) => {
  console.log(s.name);
});

// These are all settings combined.
s.settings.forEach((s: Setting) => {
  console.log(s.name);
});